// app/course/_components/LessonListSidebar.tsx
"use client";
import React from "react";
import {
    Accordion,
    AccordionContent,
    AccordionItem,
    AccordionTrigger,
} from "@/components/ui/accordion";
import { Button } from "@/components/ui/button";
import { PlayCircle, FileText, HelpCircle, MessageCircle, CheckSquare, ListTodo, CheckCircle } from 'lucide-react';

// Import LessonResponse t·ª´ ƒë·ªãnh nghƒ©a chung c·ªßa b·∫°n
interface LessonResponse {
    id: string;
    title: string;
    recallQuestion: string;
    material: string;
    shortAnswer: string;
    multipleChoice: string;
    summaryTask: string;
    youtubeVideoId?: string;
    isRecallQuestionCompleted?: boolean; // Th√™m tr∆∞·ªùng n√†y
    isMaterialCompleted?: boolean;     // Th√™m tr∆∞·ªùng n√†y
    isShortAnswerCompleted?: boolean;  // Th√™m tr∆∞·ªùng n√†y
    isMultipleChoiceCompleted?: boolean; // Th√™m tr∆∞·ªùng n√†y
    isSummaryTaskCompleted?: boolean;  // Th√™m tr∆∞·ªùng n√†y
    isLessonCompleted?: boolean; // Th√™m tr∆∞·ªùng n√†y (c√≥ th·ªÉ l√† optional n·∫øu kh√¥ng ph·∫£i l√∫c n√†o c≈©ng c√≥)
    courseId?: string; // Th√™m tr∆∞·ªùng n√†y (c√≥ th·ªÉ l√† optional n·∫øu kh√¥ng ph·∫£i l√∫c n√†o c≈©ng c√≥)
}


interface LessonListSidebarProps {
    lessons: LessonResponse[];
    activeLessonId: string | null;
    onLessonClick: (lesson: LessonResponse) => void;
}

function LessonListSidebar({
                               lessons,
                               activeLessonId,
                               onLessonClick,
                           }: LessonListSidebarProps) {

    const activeLessonIndex = lessons.findIndex(l => l.id === activeLessonId);
    const defaultAccordionValue = activeLessonIndex !== -1 ? `item-${activeLessonIndex}` : (lessons.length > 0 ? `item-0` : undefined);

    const renderStepButton = (
        lesson: LessonResponse,
        stepKey: keyof LessonResponse, // Key c·ªßa tr∆∞·ªùng n·ªôi dung
        icon: React.ElementType,
        label: string,
        isCompletedKey: keyof LessonResponse // Th√™m key cho tr·∫°ng th√°i ho√†n th√†nh
    ) => {
        // Ki·ªÉm tra n·∫øu tr∆∞·ªùng n·ªôi dung l√† chu·ªói r·ªóng th√¨ kh√¥ng render
        if (typeof lesson[stepKey] === 'string' && !lesson[stepKey]) return null;

        // √âp ki·ªÉu ƒë·ªÉ truy c·∫≠p thu·ªôc t√≠nh boolean
        const isCompleted = (lesson[isCompletedKey] as boolean) || false;

        return (
            <Button
                variant="ghost"
                size="sm"
                className="justify-start text-sm text-gray-600 hover:text-blue-600 w-full"
                onClick={() => onLessonClick(lesson)}
            >
                {React.createElement(icon, { className: "w-4 h-4 mr-2" })}
                {label}
                {isCompleted && <CheckCircle className="w-4 h-4 ml-auto text-green-500" />}
            </Button>
        );
    };

    return (
        <div className="w-80 bg-secondary h-[calc(100vh-64px)] p-5 overflow-y-auto border-r shadow-sm flex-shrink-0">
            <h2 className="my-3 font-bold text-xl text-gray-800">üìö Danh s√°ch b√†i h·ªçc</h2>
            <Accordion type="single" collapsible defaultValue={defaultAccordionValue}>
                {lessons.map((lesson, index) => (
                    <AccordionItem value={`item-${index}`} key={lesson.id}>
                        <AccordionTrigger
                            className={`text-lg font-medium text-left flex items-center justify-between px-4 py-3 rounded-md transition-colors duration-200 ${
                                activeLessonId === lesson.id
                                    ? "bg-blue-100 text-blue-800 font-semibold"
                                    : "text-gray-700 hover:bg-gray-100"
                            }`}
                        >
                            <div className="flex items-center">
                                {lesson.isLessonCompleted ? (
                                    <CheckCircle className="w-5 h-5 mr-2 text-green-500" />
                                ) : lesson.youtubeVideoId ? (
                                    <PlayCircle className="w-5 h-5 mr-2 text-red-500" />
                                ) : (
                                    <FileText className="w-5 h-5 mr-2 text-gray-500" />
                                )}
                                {lesson.title}
                            </div>
                        </AccordionTrigger>
                        <AccordionContent>
                            <div className="flex flex-col gap-1 py-1 px-4 border-l-2 border-blue-200 ml-2">
                                {/* S·ª≠ d·ª•ng key cho tr·∫°ng th√°i ho√†n th√†nh */}
                                {renderStepButton(lesson, 'recallQuestion', HelpCircle, 'C√¢u h·ªèi g·ª£i nh·ªõ', 'isRecallQuestionCompleted')}
                                {renderStepButton(lesson, 'material', FileText, 'T√†i li·ªáu b√†i h·ªçc', 'isMaterialCompleted')}
                                {renderStepButton(lesson, 'shortAnswer', MessageCircle, 'Tr·∫£ l·ªùi ng·∫Øn', 'isShortAnswerCompleted')}
                                {renderStepButton(lesson, 'multipleChoice', CheckSquare, 'Tr·∫Øc nghi·ªám', 'isMultipleChoiceCompleted')}
                                {renderStepButton(lesson, 'summaryTask', ListTodo, 'Nhi·ªám v·ª• t√≥m t·∫Øt', 'isSummaryTaskCompleted')}
                            </div>
                        </AccordionContent>
                    </AccordionItem>
                ))}
            </Accordion>
            <div className="mt-8 p-4 bg-blue-50 rounded-md border border-blue-200 text-sm text-blue-800">
                <p className="font-semibold">C·∫ßn ngh·ªâ ng∆°i?</p>
                <p className="mt-1">H√£y l√†m m·ªôt b√†i ki·ªÉm tra nhanh ƒë·ªÉ ki·ªÉm tra ki·∫øn th·ª©c c·ªßa b·∫°n!</p>
                <Button className="mt-4 w-full" variant="secondary" onClick={() => {/* Handle Start Quiz */}}>
                    <PlayCircle className="mr-2 h-4 w-4" /> B·∫Øt ƒë·∫ßu b√†i ki·ªÉm tra
                </Button>
            </div>
        </div>
    );
}

export default LessonListSidebar;